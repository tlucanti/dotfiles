
function setup_history() {
	ZSH_AUTOSUGGEST_STRATEGY=(history completion)

	export HISTFILE=~/.zsh_history
	export HISTSIZE=1000000000
	export HISTFILESIZE=$HISTSIZE
	export SAVEHIST=$HISTSIZE
	export HISTORY_SUBSTRING_SEARCH_PREFIXED=1
	export HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
	export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="normal"
	export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND="normal"
	alias history="history 1"

	export HIST_STAMPS="dd.mm.yyyy"
	setopt append_history
	setopt share_history
	setopt extended_history
	setopt hist_find_no_dups
	setopt hist_expire_dups_first
	setopt hist_reduce_blanks
	setopt hist_ignore_all_dups
}

function setup_readline() {
	setopt numeric_glob_sort

	export WORDCHARS="*?.[]~!#$%^<>"
	zmodload zsh/terminfo
	bindkey -M viins $terminfo[kcuu1] history-substring-search-up
	bindkey -M viins $terminfo[kcud1] history-substring-search-down
}

function setup_prompt() {
	#set colors
	export bold="%{%B%}"
	export red="${bold}%{%F{#ff8888}%}";
	export green="${bold}%{%F{#88ff88}%}";
	export blue="${bold}%{%F{#8888ff}%}";
	export cyan="${bold}%{%F{#88ffff}%}";
	export reset="${bold}%{%f%b%}";

	function update_prompt() {
		# --------------------
		# setup status
		local st=$?;

		if [ "$st" = "0" ]; then
			st="${green}âžœ${reset}";
		else
			st="${red}($st)$reset";
		fi


		# setup cwd
		# --------------------
		local cwd;

		cwd=${PWD##*/}
		if [ "$cwd" = "" ]; then
			cwd="/";
		elif [ $(pwd) = $(cd ~ && pwd) ]; then
			cwd="~";
		fi
		cwd=${cyan}${cwd}${reset};


		# --------------------
		# setup current branch
		local git_branch=$(git branch --show-current 2>/dev/null);
		local arc_branch=$(arc branch -q 2>/dev/null | grep '*' | tail -c +3);
		local branch;
		local vc;

		if [ "$git_branch" != "" ]; then
			branch="$git_branch";
			vc="git";
		elif [ "$arc_branch" != "" ]; then
			branch="$arc_branch";
			vc="arc";
		fi
		if [ "$branch" != "" ]; then
			branch=" ${blue}${vc}:(${red}${branch}${blue})${reset}";
		fi

		export PS1="${st} ${cwd}${branch} "
		#export PS1="%{%F{#7dcfee}%}%~%{%k%}%{%F{#7dcfee}%}:%{%f%}%{%F{#fffcb0}%}${branch}%{%f%u%} %(?..%{%B%F{#be4d25}%}[%?]%{%f%b%} )"
	}

	autoload -Uz add-zsh-hook
	add-zsh-hook precmd update_prompt
}

function setup_ccache() {
	export PATH=/usr/lib/ccache/:$HOME/.local/bin:/usr/local/bin:$PATH
}

function setup_aliases() {
	alias grep='grep --color=always'
	alias clr=clear
	alias ls='ls --color=auto'
	alias cd..='cd ..'
	alias cd...='cd ...'
	alias cd-='cd -'

	alias make-raw='/usr/bin/make'
	alias make='make -erRS --warn-undefined-variables '
	alias m='make'
	alias mc='make clean'
	alias re="make clean && rm -rf build && make -j $(nproc)"

	alias g='git'
	alias gaa='git add --all'
	alias gba='git branch --all'
	alias gdw='git diff --word-diff'
	alias gf='git fetch'
	alias gm='git merge'
	alias grf='git reflog'
	alias gs='git status'
	alias gss='git status --short'
	alias ga='git add'
	alias gb='git branch'
	alias gc='git commit --signoff -m'
	alias gco='git checkout'
	alias gcp='git cherry-pick'
	alias gd='git diff'
	alias gds='git diff --staged'
	alias gl='git log --oneline --first-parent'
	alias gla='git log --oneline --all --graph'
	alias gp='git push'
	alias gr='git reset'
	alias gw='git switch'

	alias a='arc'
	alias aaa='arc add --all'
	alias adw='arc diff --word-diff'
	alias af='arc fetch'
	alias am='arc merge'
	alias arf='arc reflog'
	alias ass='arc status -u all --short'
	alias as='arc status -u all'
	alias aa='arc add'
	alias ab='arc branch'
	alias ac='arc commit --signoff -m'
	alias aco='arc checkout'
	alias acp='arc cherry-pick'
	alias ad='arc diff'
	alias ads='arc diff --staged'
	alias al='arc log --oneline --first-parent'
	alias ala='arc log --oneline --all --graph'
	alias ap='arc push'
	alias ar='arc reset'
	alias aw='arc checkout'

	alias v='nvim'
	alias nv='nvim'
}

function setup_git() {
	echo "Signed-off-by: $(git config user.name) $(git config user.email)" > ~/.gitmessage.txt
	git config --global commit.template ~/.gitmessage.txt
	git config --global commit.gpgsign true
	git config --global gpg.program gpg
	git config --global core.editor nvim
}

function mk() {
	make -j $(nproc) $@ 2>&1 >/dev/null | less -R
}

function vf() {
	nvim $(find . -name $@)
}

function gps() {
	find . -type f -name "*$2*" ! -name '*.swp' ! -name 'tags' -exec grep -Hn "$1" --color=always {} \;
}

function moveall() {
	for f in $(ls -a); do
		if [[ $f != '.git' ]] && [[ $f != $1 ]] && [[ $f != '.' && $f != '..' ]]; then
			echo moving $f to $1
			mv $f $1
		fi
	done
}

# =============================================================================
# PLUGINS

function setup_plugins() {
	if ! [ -e ~/.antidote ]; then
		echo 'installing antidote'
		git clone --depth=1 https://github.com/mattmc3/antidote.git ~/.antidote
	fi
	source ~/.antidote/antidote.zsh
	antidote load
}

function plugin_zsh_syntax_highlightning() {
	export ZSH_THEME="robbyrussell"
	export ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=blue,bold'
	export ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=red,bold'
	export ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=yellow,bold'
	export ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=magenta,bold'
	export ZSH_HIGHLIGHT_STYLES[builtin]='fg=green,bold'
	export ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=yellow,bold'
	export ZSH_HIGHLIGHT_STYLES[path]='bold,underline'
	export ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='bold'
	export ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='bold'
	export ZSH_HIGHLIGHT_STYLES[redirection]='fg=yellow,bold'
	export ZSH_HIGHLIGHT_STYLES[arg0]='fg=green,bold'
}

# =============================================================================
# YANDEX
function setup_yandex() {
	# The next line updates PATH for Yandex Cloud Private CLI.
	if [ -f '/home/tlucanti/ycp/path.bash.inc' ]; then source '/home/tlucanti/ycp/path.bash.inc'; fi

	# pssh autocomplete
	source ~/.pssh/complete.zsh

	cd /
	arc mount --repository cloudia ~/cloudia 2> /dev/null
	cd - > /dev/null
}


# GLOBAL SETUP
setup_history
setup_readline
setup_prompt
setup_ccache
setup_aliases
setup_git

# LOCAL SETUP
setup_yandex

setup_plugins
plugin_zsh_syntax_highlightning

source ~/.oh-my-zsh/oh-my-zsh.sh

